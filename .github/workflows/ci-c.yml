name: Build and test C

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  c-format-check:
    name: Check C Source Code Formatting
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v5
      - name: Check Source Format
        id: check
        run: |
          clang-format -i -style=file {agent_controller,base,boreas,gmp,http,openvasd,osp,util}/*.{c,h}
          git diff --exit-code
      - name: Report Diff
        if: ${{ failure() && steps.check.outcome == 'failure' }}
        run: |
          echo "## Clang Format Check" >> $GITHUB_STEP_SUMMARY
          echo "Found formatting issues in the source code. Please run clang-format to fix them." >> $GITHUB_STEP_SUMMARY
          echo '```sh' >> $GITHUB_STEP_SUMMARY
          echo 'clang-format -i -style=file {agent_controller,base,boreas,gmp,http,openvasd,osp,util}/*.{c,h}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "## Clang Format Diff" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          git diff >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  cmake-format-check:
    name: Check CMake Formatting
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v5
      - uses: greenbone/actions/uv@v3
        with:
          install: gersemi
      - name: Check CMake Format
        id: check
        run: |
          gersemi --check . cmake
      - name: Report Diff
        if: ${{ failure() && steps.check.outcome == 'failure' }}
        run: |
          echo "## CMake Format Check" >> $GITHUB_STEP_SUMMARY
          gersemi --check --no-warn-about-unknown-commands . cmake >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo "Found formatting issues in the source code. Please run gersemi to fix them." >> $GITHUB_STEP_SUMMARY
          echo '```sh' >> $GITHUB_STEP_SUMMARY
          echo 'gersemi -i . cmake' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "## CMake Format Diff" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          gersemi --diff . cmake >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  tests:
    name: Unit Tests
    runs-on: "ubuntu-latest"
    container: debian:stable-slim
    steps:
      - uses: actions/checkout@v5
      - name: Install build dependencies
        run: sh .github/install-dependencies.sh .github/build-dependencies.list
      - name: Set git safe.directory
        run: git config --global --add safe.directory '*'
      - name: Install cgreen
        uses: greenbone/actions/install-cgreen@v3
      - name: Configure and Compile gvm-libs
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=1 -DENABLE_COVERAGE=1
          cmake --build build -- install
      - name: Test gvm-libs
        run: |
          CTEST_OUTPUT_ON_FAILURE=1 cmake --build build -- tests test coverage-xml
      - name: Upload test coverage to Codecov
        if: github.repository == 'greenbone/gvm-libs'
        uses: codecov/codecov-action@v5
        with:
          files: build/coverage/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests

  scan-build:
    name: Scan-build gvm-libs with clang
    runs-on: "ubuntu-latest"
    container: debian:stable-slim
    steps:
      - uses: actions/checkout@v5
      - name: Install build dependencies
        run: sh .github/install-dependencies.sh .github/build-dependencies.list
      - name: Install clang tools
        run: |
          apt update
          apt-get install --no-install-recommends -y clang clang-format clang-tools
      - name: Configure and Scan Build gvm-libs
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          scan-build -o ~/scan-build-report cmake --build build
      - name: Upload scan-build report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: scan-build-report
          path: ~/scan-build-report/
          retention-days: 7
