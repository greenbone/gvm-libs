name: Build and test C

on:
  push:
    branches: [ main, oldstable, stable ]
  pull_request:
    branches: [ main, oldstable, stable ]


jobs:
  c-format-check:
    name: Check C Source Code Formatting
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Check Source Format
        run: |
          clang-format -i -style=file base/*.{c,h} boreas/*.{c,h} gmp/*.{c,h} \
            osp/*.{c,h} util/*.{c,h}
          git diff --exit-code

  tests:
    name: Unit Tests
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        container:
          - greenbone/gvm-libs-clang-build:oldstable
          - greenbone/gvm-libs-gcc-build:oldstable
    container: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure and Compile gvm-libs
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=1 ..
          make install
      - name: Test gvm-libs
        run: |
          cd build
          make tests
          CTEST_OUTPUT_ON_FAILURE=1 make test

  scan-build:
    name: Scan-build gvm-libs with clang
    runs-on: 'ubuntu-latest'
    container: greenbone/gvm-libs-clang-build:oldstable
    steps:
      - uses: actions/checkout@v2
      - name: Configure and Compile gvm-libs
        run: |
          mkdir build
          cd build
          scan-build cmake -DCMAKE_BUILD_TYPE=Debug ..
          scan-build -o ~/scan-build-report make
          [ -z "$(ls -A ~/scan-build-report/)" ]
        working-directory: ${{ github.WORKSPACE }}
      - name: Upload scan-build report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: scan-build-report
          path: ~/scan-build-report
