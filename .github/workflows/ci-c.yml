name: Build and test C

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  c_format_check:
    name: Check C Source Code Formatting
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Check Source Format
        run: |
          clang-format -i -style=file base/*.{c,h} boreas/*.{c,h} \
          gmp/*.{c,h} osp/*.{c,h} util/*.{c,h} && git diff --exit-code
  test_units:
    name: Unit Tests
    runs-on: 'ubuntu-latest'
    container: greenbone/build-env-gvm-libs-master-debian-buster-gcc-test
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Configure and test gvm-libs
        run: |
          mkdir build && cd build/ && cmake -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTS=1 .. && make install && make tests && \
          CTEST_OUTPUT_ON_FAILURE=1 make test
        working-directory: ${{ github.WORKSPACE }}
  build_gcc_core:
    name: Build gvm-libs with gcc
    runs-on: 'ubuntu-latest'
    container: greenbone/build-env-gvm-libs-master-debian-buster-gcc-test
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Configure and Compile gvm-libs
        run: |
          mkdir build && cd build/ && cmake \
          -DCMAKE_BUILD_TYPE=Release .. && make install
        working-directory: ${{ github.WORKSPACE }}
  scan_build:
    name: Scan-build gvm-libs with clang
    runs-on: 'ubuntu-latest'
    container: greenbone/build-env-gvm-libs-master-debian-buster-clang-core
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Configure and Compile gvm-libs
        run: |
          mkdir build && cd build/ && scan-build cmake \
          -DCMAKE_BUILD_TYPE=Debug .. && scan-build \
          -o ~/scan-build-report make && [ -z "$(ls -A ~/scan-build-report/)" ]
        working-directory: ${{ github.WORKSPACE }}
  gen_xml_doc:
    name: Generate documentation (XML)
    runs-on: 'ubuntu-latest'
    container: greenbone/code-metrics-doxygen-debian-stretch
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Generate documentation (XML)
        run: mkdir build && cd build/ && cmake -DSKIP_SRC=1 .. && \
          make doc-xml 2> ${{ github.WORKSPACE }}/doxygen-stderr.txt
        working-directory: ${{ github.WORKSPACE }}
